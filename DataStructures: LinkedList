LinkedList:
class Node:
  def __init__(self, data):
    self.data = data
    self.next = None
class LinkedList:
  def __init__(self):
    self.head = None
    
  #insert a node at the beginning, O(1) complexity - because it does constant amount of work
  def push(self,new_data):
    new_node = Node(new_data)
    new_node.next = self.head
    self.head= new_node
  
  #time complexity is o(n), since linked list has to be traversed to insert at the end
  def append(self, new_data):
    new_node = Node(new_data)
    if self.head is None:
      self.head = new_node
      return    
    temp = self.head
    while(temp.next):
      temp = temp.next
    temp.next = new_node
    
  #time complexity is o(1)
  def insert_after(self, prev_node, new_data):
    if prev_node is None:
      print("are you dumb?")
      return
    new_node = Node(new_data)
    new_node.next = prev_node.next
    prev_node.next = new_node
    
  def print_list:
    temp = self.head
    while (temp.next):
      print(temp.data)
      temp = temp.next
if __name__ == '__main__':
  llist = LinkedList()
  llist.append(1)
  llist.push(0)
  llist.push(0)
  llist.append(2)
  llist.insert_after(llist.head.next, 5)
  llist.print_list()
